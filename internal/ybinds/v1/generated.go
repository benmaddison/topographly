/*
Package v1 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/benm/go/src/github.com/benmaddison/topographly/vendor/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- yang/topology-v1.yang
Imported modules were sourced from:
	- yang/...
*/
package v1

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Root{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Root represents the /root YANG schema element.
type Root struct {
	Topology	*Topology	`path:"topology" module:"topology-v1"`
}

// IsYANGGoStruct ensures that Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Root) IsYANGGoStruct() {}

// GetOrCreateTopology retrieves the value of the Topology field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateTopology() *Topology {
	if t.Topology != nil {
		return t.Topology
	}
	t.Topology = &Topology{}
	return t.Topology
}

// GetTopology returns the value of the Topology struct pointer
// from Root. If the receiver or the field Topology is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetTopology() *Topology {
	if t != nil && t.Topology != nil {
		return t.Topology
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Root) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Topology represents the /topology-v1/topology YANG schema element.
type Topology struct {
	Link	map[string]*Topology_Link	`path:"links/link" module:"topology-v1"`
	Node	map[string]*Topology_Node	`path:"nodes/node" module:"topology-v1"`
}

// IsYANGGoStruct ensures that Topology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Topology) IsYANGGoStruct() {}

// NewLink creates a new entry in the Link list of the
// Topology struct. The keys of the list are populated from the input
// arguments.
func (t *Topology) NewLink(IpPrefix string) (*Topology_Link, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*Topology_Link)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Link[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Link", key)
	}

	t.Link[key] = &Topology_Link{
		IpPrefix: &IpPrefix,
	}

	return t.Link[key], nil
}

// GetOrCreateLink retrieves the value with the specified keys from
// the receiver Topology. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Topology) GetOrCreateLink(IpPrefix string) (*Topology_Link){

	key := IpPrefix

	if v, ok := t.Link[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLink(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLink got unexpected error: %v", err))
	}
	return v
}

// GetLink retrieves the value with the specified key from
// the Link map field of Topology. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Topology) GetLink(IpPrefix string) (*Topology_Link){

	if t == nil {
		return nil
	}

  key := IpPrefix

  if lm, ok := t.Link[key]; ok {
    return lm
  }
  return nil
}

// DeleteLink deletes the value with the specified keys from
// the receiver Topology. If there is no such element, the function
// is a no-op.
func (t *Topology) DeleteLink(IpPrefix string) {
	key := IpPrefix

	delete(t.Link, key)
}

// NewNode creates a new entry in the Node list of the
// Topology struct. The keys of the list are populated from the input
// arguments.
func (t *Topology) NewNode(Hostname string) (*Topology_Node, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Node == nil {
		t.Node = make(map[string]*Topology_Node)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Node[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Node", key)
	}

	t.Node[key] = &Topology_Node{
		Hostname: &Hostname,
	}

	return t.Node[key], nil
}

// GetOrCreateNode retrieves the value with the specified keys from
// the receiver Topology. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Topology) GetOrCreateNode(Hostname string) (*Topology_Node){

	key := Hostname

	if v, ok := t.Node[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNode(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNode got unexpected error: %v", err))
	}
	return v
}

// GetNode retrieves the value with the specified key from
// the Node map field of Topology. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Topology) GetNode(Hostname string) (*Topology_Node){

	if t == nil {
		return nil
	}

  key := Hostname

  if lm, ok := t.Node[key]; ok {
    return lm
  }
  return nil
}

// DeleteNode deletes the value with the specified keys from
// the receiver Topology. If there is no such element, the function
// is a no-op.
func (t *Topology) DeleteNode(Hostname string) {
	key := Hostname

	delete(t.Node, key)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Topology) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Topology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Topology) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Topology_Link represents the /topology-v1/topology/links/link YANG schema element.
type Topology_Link struct {
	EndpointA	*string	`path:"config/endpoint-a" module:"topology-v1"`
	EndpointZ	*string	`path:"config/endpoint-z" module:"topology-v1"`
	IpPrefix	*string	`path:"config/ip-prefix|ip-prefix" module:"topology-v1"`
}

// IsYANGGoStruct ensures that Topology_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Topology_Link) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Topology_Link struct, which is a YANG list entry.
func (t *Topology_Link) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Topology_Link) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Topology_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Topology_Link) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Topology_Node represents the /topology-v1/topology/nodes/node YANG schema element.
type Topology_Node struct {
	Hostname	*string	`path:"config/hostname|hostname" module:"topology-v1"`
}

// IsYANGGoStruct ensures that Topology_Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Topology_Node) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Topology_Node struct, which is a YANG list entry.
func (t *Topology_Node) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Topology_Node) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Topology_Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Topology_Node) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }



var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xcb, 0x6e, 0xdb, 0x3a,
		0x10, 0xdd, 0xfb, 0x2b, 0x04, 0xae, 0xe3, 0x38, 0xb9, 0x9b, 0x5b, 0x68, 0x97, 0xa6, 0x2d, 0x0a,
		0xe4, 0xd1, 0xa0, 0xc9, 0xbe, 0x10, 0x2c, 0xda, 0x26, 0x62, 0x93, 0x02, 0x49, 0xa7, 0x71, 0x0a,
		0xff, 0x7b, 0x21, 0x51, 0x0f, 0x4b, 0x96, 0x2d, 0x0e, 0x29, 0xa7, 0xb5, 0x3b, 0x9b, 0xa0, 0x95,
		0xf8, 0x18, 0xce, 0x39, 0x3c, 0x1a, 0x0e, 0x07, 0xfe, 0x35, 0x08, 0x82, 0x20, 0x20, 0xf7, 0xd1,
		0x82, 0x92, 0x30, 0x20, 0x52, 0x08, 0x4d, 0xce, 0xcc, 0xb3, 0x1b, 0xc6, 0x63, 0x12, 0x06, 0x97,
		0xf9, 0x7f, 0xaf, 0x05, 0x9f, 0xb0, 0x29, 0x09, 0x83, 0x8b, 0xfc, 0xc1, 0x27, 0x26, 0x49, 0x18,
		0x98, 0x01, 0xb2, 0x07, 0x5a, 0x24, 0x62, 0x2e, 0xa6, 0xab, 0xda, 0xd3, 0xda, 0xf0, 0x65, 0x8b,
		0xb3, 0xfa, 0xfb, 0xfa, 0x54, 0xe5, 0xe3, 0xe6, 0x94, 0xe5, 0x8b, 0x07, 0x49, 0x27, 0xec, 0x75,
		0x6b, 0x9e, 0xfa, 0x5c, 0xd3, 0xe1, 0xcb, 0x65, 0x63, 0xa2, 0xac, 0xc1, 0xa3, 0x58, 0xca, 0x31,
		0x6d, 0xed, 0x6c, 0x8c, 0xa1, 0xab, 0x9f, 0x42, 0xa6, 0xf6, 0x90, 0xc4, 0xcc, 0x73, 0xd6, 0xde,
		0xf0, 0x6b, 0xa4, 0xae, 0xe4, 0x74, 0xb9, 0xa0, 0x5c, 0x93, 0x30, 0xd0, 0x72, 0x49, 0x77, 0x34,
		0xdc, 0x68, 0x95, 0x9b, 0xb5, 0xd5, 0x6e, 0x5d, 0x7b, 0xb2, 0x6e, 0xac, 0xb7, 0xe9, 0xea, 0xf2,
		0xc5, 0x9c, 0xf1, 0x67, 0xb5, 0x7b, 0x29, 0x85, 0x2f, 0x4c, 0xb3, 0x1d, 0xd6, 0xb5, 0x3b, 0xbf,
		0x13, 0x04, 0x1b, 0x30, 0xac, 0x41, 0xb1, 0x05, 0x07, 0x0c, 0x12, 0x18, 0x2c, 0x08, 0x68, 0xed,
		0xe0, 0xed, 0x00, 0xb1, 0x13, 0xcc, 0x1a, 0xa8, 0xdd, 0x1e, 0xd8, 0xc4, 0xb6, 0x6b, 0xf1, 0xfb,
		0x21, 0xb6, 0x86, 0x1a, 0x02, 0x39, 0x18, 0x7a, 0x28, 0x05, 0x9c, 0xa9, 0xe0, 0x4c, 0x09, 0x17,
		0x6a, 0xec, 0xa7, 0x48, 0x07, 0x55, 0xac, 0x29, 0x53, 0x36, 0x1c, 0x17, 0x08, 0x5a, 0xfa, 0xae,
		0x00, 0x27, 0xef, 0x67, 0xb9, 0x7e, 0x3b, 0x3a, 0x81, 0x69, 0xe5, 0x42, 0x2f, 0x67, 0x9a, 0xb9,
		0xd2, 0xcd, 0x9b, 0x76, 0xde, 0xf4, 0xf3, 0xa1, 0xa1, 0x1d, 0x1d, 0x2d, 0x69, 0x09, 0xa6, 0x67,
		0xd9, 0x81, 0xf2, 0x38, 0x11, 0x8c, 0xeb, 0x61, 0x04, 0xf7, 0x7b, 0x01, 0xf4, 0xc6, 0x18, 0x40,
		0xbf, 0xe5, 0xf4, 0xbd, 0x00, 0x76, 0x83, 0xd2, 0xd8, 0x87, 0xce, 0xde, 0xb4, 0xf6, 0xa5, 0x77,
		0x6f, 0x34, 0xef, 0x8d, 0xee, 0x7d, 0xd0, 0x1e, 0x46, 0x7f, 0xe0, 0x36, 0x28, 0x0d, 0x7c, 0x5a,
		0x25, 0xd4, 0x0f, 0x6d, 0x2e, 0x62, 0x3a, 0x94, 0x74, 0xe2, 0x02, 0x78, 0x21, 0xce, 0xff, 0x3b,
		0xf4, 0x7d, 0x88, 0xf4, 0x2c, 0x9d, 0x7f, 0x54, 0x04, 0xea, 0xa3, 0xd4, 0x12, 0x95, 0xfd, 0x1d,
		0xcd, 0x84, 0xd2, 0x3c, 0x35, 0x70, 0x70, 0x18, 0x57, 0x03, 0xdc, 0x5c, 0x6d, 0xfe, 0xb7, 0x1e,
		0x04, 0xe4, 0x0d, 0x05, 0x04, 0x05, 0x04, 0x05, 0xe4, 0x9f, 0x12, 0x10, 0x96, 0x0c, 0x13, 0xb7,
		0x5d, 0x55, 0xfa, 0xb8, 0x1a, 0x02, 0xe5, 0x03, 0xe5, 0xe3, 0xa4, 0xe4, 0x43, 0x69, 0xc9, 0xf8,
		0xd4, 0x47, 0x3c, 0x3e, 0x1c, 0x6a, 0x8f, 0xf7, 0x7a, 0x70, 0xb9, 0xe2, 0x5c, 0xe8, 0x48, 0x33,
		0xc1, 0x61, 0xe7, 0x17, 0x35, 0x9e, 0xd1, 0x45, 0x94, 0x34, 0xc5, 0x6e, 0xf8, 0x72, 0x59, 0x09,
		0x5f, 0x96, 0x73, 0xcb, 0xfe, 0x8e, 0xf2, 0xd3, 0xf5, 0xa0, 0x9f, 0x05, 0x5a, 0x2c, 0xce, 0x41,
		0xde, 0x9c, 0x65, 0x0d, 0x28, 0x67, 0x98, 0x0d, 0x38, 0xf5, 0x6c, 0x00, 0x58, 0x7e, 0xaa, 0x54,
		0x26, 0x8d, 0x26, 0xb0, 0xa0, 0xc5, 0x25, 0x58, 0x29, 0x83, 0x94, 0xf3, 0xf3, 0x7c, 0x67, 0x8e,
		0x2a, 0xce, 0xbf, 0xe3, 0x1e, 0x55, 0x3a, 0xd2, 0x14, 0xbe, 0x3f, 0x4d, 0xb7, 0x03, 0x67, 0xea,
		0xfe, 0xc3, 0xbd, 0x89, 0x99, 0x3a, 0xcc, 0xd4, 0x61, 0xa4, 0x8c, 0x91, 0x32, 0x1e, 0xb4, 0x31,
		0x53, 0x87, 0x02, 0x82, 0x02, 0x82, 0x02, 0x82, 0x99, 0x3a, 0x94, 0x0f, 0x94, 0x0f, 0xcc, 0xd4,
		0x9d, 0x70, 0xa6, 0xce, 0x1c, 0xae, 0xfb, 0x4a, 0x02, 0x78, 0xd5, 0xfc, 0xdc, 0xd0, 0x15, 0x44,
		0xbb, 0xc8, 0x2d, 0x53, 0xfa, 0x4a, 0x6b, 0xcb, 0x42, 0xa1, 0x3b, 0xc6, 0x3f, 0xcf, 0x69, 0xba,
		0x39, 0x14, 0x09, 0x03, 0xbe, 0x9c, 0xcf, 0x2d, 0x32, 0x16, 0x77, 0xd1, 0x2b, 0xbc, 0xd3, 0x37,
		0x19, 0x53, 0x49, 0xe3, 0x8f, 0xab, 0xbc, 0x8b, 0x97, 0x53, 0x80, 0x34, 0x00, 0xc2, 0x4f, 0xac,
		0xb2, 0x36, 0x72, 0x39, 0x36, 0x1f, 0xc7, 0x30, 0x20, 0x4f, 0xf9, 0x20, 0x3f, 0x6e, 0xd3, 0xee,
		0x03, 0x37, 0x36, 0xc0, 0xca, 0x07, 0x2d, 0x5d, 0x60, 0xbf, 0xf4, 0x76, 0xb3, 0xb7, 0x8d, 0x6a,
		0x31, 0x28, 0x8b, 0x5e, 0x2c, 0xea, 0x4f, 0x4d, 0x33, 0xac, 0x3f, 0x3d, 0x8e, 0xfa, 0xd3, 0x14,
		0x2d, 0xfb, 0xfa, 0xd3, 0xac, 0x35, 0xd6, 0x9f, 0x62, 0xfd, 0x29, 0xd6, 0x9f, 0x62, 0x56, 0xfb,
		0x48, 0xb2, 0xda, 0xe5, 0xf9, 0xd6, 0xf9, 0x48, 0x59, 0x8e, 0x80, 0x27, 0x4a, 0x3c, 0x51, 0xe2,
		0x89, 0x12, 0x4f, 0x94, 0xb5, 0xb8, 0x7a, 0x23, 0x95, 0xf6, 0xfe, 0xb5, 0x1f, 0x60, 0x71, 0x73,
		0x15, 0x35, 0xac, 0xfc, 0xc0, 0xef, 0xb0, 0x9f, 0xf8, 0xfc, 0xf9, 0xca, 0x0f, 0x58, 0xa6, 0x1b,
		0x0b, 0x3f, 0x70, 0x6b, 0x62, 0x88, 0x8c, 0x21, 0x32, 0x86, 0xc8, 0x18, 0x22, 0x63, 0x88, 0xdc,
		0x57, 0x88, 0xfc, 0xf7, 0x5d, 0xba, 0x58, 0x4a, 0x17, 0xde, 0xb9, 0xf8, 0xa3, 0xef, 0x71, 0xe7,
		0x72, 0x9f, 0x76, 0x3f, 0xba, 0x3b, 0x17, 0x73, 0x17, 0x62, 0x7b, 0xe7, 0xb2, 0xf7, 0x67, 0x41,
		0x3a, 0xcc, 0xb2, 0x31, 0xa7, 0xed, 0x07, 0x52, 0xda, 0xdd, 0x5d, 0x37, 0xb9, 0x32, 0xcc, 0xfc,
		0x2b, 0x37, 0x6d, 0x97, 0x49, 0x84, 0xa9, 0x6b, 0xb1, 0x48, 0x24, 0x55, 0x8a, 0xc6, 0x8f, 0x99,
		0x59, 0x5b, 0x5f, 0x19, 0xc2, 0xd4, 0x97, 0xe8, 0x99, 0x7e, 0x17, 0x62, 0xfb, 0x0b, 0xd4, 0x5c,
		0x0a, 0xd9, 0x7c, 0x55, 0x33, 0x37, 0xeb, 0x6e, 0x4c, 0x1a, 0xac, 0x7f, 0x03, 0x00, 0x00, 0xff,
		0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x29, 0x6e, 0xc6, 0xde, 0x46, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
}

